/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  role?: string;
  organization?: string;
  about?: {
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    shortBio?: string;
    photo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  };
  contactInfo?: {
    email?: string;
    phone?: string;
    socialLinks?: Array<{
      platform?: string;
      url?: string;
      _key: string;
    }>;
  };
  boardType?: "board" | "advisory" | "faculty";
  order?: number;
  credentials?: Array<{
    degree?: string;
    institution?: string;
    year?: number;
    _key: string;
  }>;
  expertise?: Array<string>;
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
};

export type AnselmSection = {
  _id: string;
  _type: "anselmSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  lifespan?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h3" | "h4";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  quote?: {
    text?: string;
    source?: string;
  };
  portrait?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type IdentitySection = {
  _id: string;
  _type: "identitySection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titleP1?: string;
  titleP2?: string;
  distinctives?: Array<{
    title?: string;
    shortDescription?: string;
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h3" | "h4";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    icon?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    _type: "distinctive";
    _key: string;
  }>;
  motto?: {
    primary?: string;
    sub?: string;
    showInCarousel?: boolean;
    mottoExplanation?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  ctaText?: string;
  ctaLink?: string;
};

export type PurposeSection = {
  _id: string;
  _type: "purposeSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titleP1?: string;
  titleP2?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  highlightQuote?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quotes";
  };
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Quotes = {
  _id: string;
  _type: "quotes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  text?: string;
  author?: string;
  source?: string;
  authorImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    position?: "left" | "center" | "right";
    _type: "image";
  };
  category?: "education" | "faith" | "classical" | "wisdom";
  featured?: boolean;
  showInCarousel?: boolean;
};

export type HeroSection = {
  _id: string;
  _type: "heroSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  headline?: string;
  subheadline?: string;
  openingStatement?: string;
  ctaText?: string;
  donationCtaText?: string;
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  logomark?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  logotype?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  seo?: {
    title?: string;
    description?: string;
  };
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  favicon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  openingDate?: string;
  foundingYear?: number;
  address?: {
    streetAddress?: string;
    addressLocality?: string;
    addressRegion?: string;
    postalCode?: string;
    addressCountry?: string;
  };
  contactInfo?: {
    phone?: string;
    email?: string;
    admissionsEmail?: string;
  };
  socialLinks?: Array<{
    platform?: string;
    url?: string;
    handle?: string;
    _key: string;
  }>;
  seoSettings?: {
    metaTitle?: string;
    metaDescription?: string;
    keywords?: Array<string>;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Person | AnselmSection | IdentitySection | PurposeSection | Quotes | HeroSection | SiteSettings | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/queries/heroSection.ts
// Variable: HERO_SECTION_QUERY
// Query: *[_type == "heroSection"][0] {    headline,    subheadline,    openingStatement,    ctaText,    donationCtaText,    backgroundImage {      asset->{        _id,        url      },      alt    },    logomark {      asset->{        _id,        url      },      alt    },    logotype {      asset->{        _id,        url      },      alt    }  }
export type HERO_SECTION_QUERYResult = {
  headline: string | null;
  subheadline: string | null;
  openingStatement: string | null;
  ctaText: string | null;
  donationCtaText: string | null;
  backgroundImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  logomark: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  logotype: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
} | null;

// Source: ./src/queries/identitySection.ts
// Variable: IDENTITY_SECTION_QUERY
// Query: *[_type == "identitySection"][0] {    titleP1,    titleP2,    distinctives[] {      title,      shortDescription,      content,      icon {        asset->{          _id,          url        },        alt      }    },    motto {      primary,      sub,      showInCarousel,      mottoExplanation    },    ctaText,    ctaLink  }
export type IDENTITY_SECTION_QUERYResult = {
  titleP1: string | null;
  titleP2: string | null;
  distinctives: Array<{
    title: string | null;
    shortDescription: string | null;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    icon: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  }> | null;
  motto: {
    primary: string | null;
    sub: string | null;
    showInCarousel: boolean | null;
    mottoExplanation: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  } | null;
  ctaText: string | null;
  ctaLink: string | null;
} | null;

// Source: ./src/queries/purposeSection.ts
// Variable: PURPOSE_SECTION_QUERY
// Query: *[_type == "purposeSection"][0] {    titleP1,    titleP2,    content,    highlightQuote->{      _id,      title,      text,      author,      source,      category,      featured,      showInCarousel,      authorImage {        asset->{          _id,          url        },        alt,        position      }    },    backgroundImage {      asset->{        _id,        url      },      alt    }  }
export type PURPOSE_SECTION_QUERYResult = {
  titleP1: string | null;
  titleP2: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  highlightQuote: {
    _id: string;
    title: string | null;
    text: string | null;
    author: string | null;
    source: string | null;
    category: "classical" | "education" | "faith" | "wisdom" | null;
    featured: boolean | null;
    showInCarousel: boolean | null;
    authorImage: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string | null;
      position: "center" | "left" | "right" | null;
    } | null;
  } | null;
  backgroundImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
} | null;

// Source: ./src/queries/quotes.ts
// Variable: QUOTES_QUERY
// Query: *[_type == "quotes"] {    _id,    title,    text,    author,    source,    category,    featured,    showInCarousel,    authorImage {      asset->{        _id,        url      },      alt,      position    }  }
export type QUOTES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  text: string | null;
  author: string | null;
  source: string | null;
  category: "classical" | "education" | "faith" | "wisdom" | null;
  featured: boolean | null;
  showInCarousel: boolean | null;
  authorImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
    position: "center" | "left" | "right" | null;
  } | null;
}>;
// Variable: FEATURED_QUOTES_QUERY
// Query: *[_type == "quotes" && featured == true] {    _id,    title,    text,    author,    source,    category,    featured,    showInCarousel,    authorImage {      asset->{        _id,        url      },      alt,      position    }  }
export type FEATURED_QUOTES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  text: string | null;
  author: string | null;
  source: string | null;
  category: "classical" | "education" | "faith" | "wisdom" | null;
  featured: boolean | null;
  showInCarousel: boolean | null;
  authorImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
    position: "center" | "left" | "right" | null;
  } | null;
}>;
// Variable: QUOTES_BY_CATEGORY_QUERY
// Query: *[_type == "quotes" && category == $category] {    _id,    title,    text,    author,    source,    category,    featured,    showInCarousel,    authorImage {      asset->{        _id,        url      },      alt,      position    }  }
export type QUOTES_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  title: string | null;
  text: string | null;
  author: string | null;
  source: string | null;
  category: "classical" | "education" | "faith" | "wisdom" | null;
  featured: boolean | null;
  showInCarousel: boolean | null;
  authorImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
    position: "center" | "left" | "right" | null;
  } | null;
}>;
// Variable: SINGLE_QUOTE_QUERY
// Query: *[_type == "quotes" && _id == $id][0] {    _id,    title,    text,    author,    source,    category,    featured,    showInCarousel,    authorImage {      asset->{        _id,        url      },      alt,      position    }  }
export type SINGLE_QUOTE_QUERYResult = {
  _id: string;
  title: string | null;
  text: string | null;
  author: string | null;
  source: string | null;
  category: "classical" | "education" | "faith" | "wisdom" | null;
  featured: boolean | null;
  showInCarousel: boolean | null;
  authorImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
    position: "center" | "left" | "right" | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"heroSection\"][0] {\n    headline,\n    subheadline,\n    openingStatement,\n    ctaText,\n    donationCtaText,\n    backgroundImage {\n      asset->{\n        _id,\n        url\n      },\n      alt\n    },\n    logomark {\n      asset->{\n        _id,\n        url\n      },\n      alt\n    },\n    logotype {\n      asset->{\n        _id,\n        url\n      },\n      alt\n    }\n  }\n": HERO_SECTION_QUERYResult;
    "\n  *[_type == \"identitySection\"][0] {\n    titleP1,\n    titleP2,\n    distinctives[] {\n      title,\n      shortDescription,\n      content,\n      icon {\n        asset->{\n          _id,\n          url\n        },\n        alt\n      }\n    },\n    motto {\n      primary,\n      sub,\n      showInCarousel,\n      mottoExplanation\n    },\n    ctaText,\n    ctaLink\n  }\n": IDENTITY_SECTION_QUERYResult;
    "\n  *[_type == \"purposeSection\"][0] {\n    titleP1,\n    titleP2,\n    content,\n    highlightQuote->{\n      _id,\n      title,\n      text,\n      author,\n      source,\n      category,\n      featured,\n      showInCarousel,\n      authorImage {\n        asset->{\n          _id,\n          url\n        },\n        alt,\n        position\n      }\n    },\n    backgroundImage {\n      asset->{\n        _id,\n        url\n      },\n      alt\n    }\n  }\n": PURPOSE_SECTION_QUERYResult;
    "\n  *[_type == \"quotes\"] {\n    _id,\n    title,\n    text,\n    author,\n    source,\n    category,\n    featured,\n    showInCarousel,\n    authorImage {\n      asset->{\n        _id,\n        url\n      },\n      alt,\n      position\n    }\n  }\n": QUOTES_QUERYResult;
    "\n  *[_type == \"quotes\" && featured == true] {\n    _id,\n    title,\n    text,\n    author,\n    source,\n    category,\n    featured,\n    showInCarousel,\n    authorImage {\n      asset->{\n        _id,\n        url\n      },\n      alt,\n      position\n    }\n  }\n": FEATURED_QUOTES_QUERYResult;
    "\n  *[_type == \"quotes\" && category == $category] {\n    _id,\n    title,\n    text,\n    author,\n    source,\n    category,\n    featured,\n    showInCarousel,\n    authorImage {\n      asset->{\n        _id,\n        url\n      },\n      alt,\n      position\n    }\n  }\n": QUOTES_BY_CATEGORY_QUERYResult;
    "\n  *[_type == \"quotes\" && _id == $id][0] {\n    _id,\n    title,\n    text,\n    author,\n    source,\n    category,\n    featured,\n    showInCarousel,\n    authorImage {\n      asset->{\n        _id,\n        url\n      },\n      alt,\n      position\n    }\n  }\n": SINGLE_QUOTE_QUERYResult;
  }
}
